/**
 * GBI Form REST API
 * \"REST API for GBI Forms\"
 *
 * OpenAPI spec version: 1.0.0
 * Contact: meinetoonen@b3partners.nl
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { PageWegvakonderdeelplanning } from '../model/pageWegvakonderdeelplanning';
import { Wegvakonderdeelplanning } from '../model/wegvakonderdeelplanning';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class WegvakonderdeelplanningControllerService {

    protected basePath = 'http://localhost:9090';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param object_guid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public delete2(object_guid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public delete2(object_guid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public delete2(object_guid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public delete2(object_guid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (object_guid === null || object_guid === undefined) {
            throw new Error('Required parameter object_guid was null or undefined when calling delete2.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/wegvakonderdeelplanning/${encodeURIComponent(String(object_guid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param object_guid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public get2(object_guid: string, observe?: 'body', reportProgress?: boolean): Observable<Wegvakonderdeelplanning>;
    public get2(object_guid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Wegvakonderdeelplanning>>;
    public get2(object_guid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Wegvakonderdeelplanning>>;
    public get2(object_guid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (object_guid === null || object_guid === undefined) {
            throw new Error('Required parameter object_guid was null or undefined when calling get2.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Wegvakonderdeelplanning>('get',`${this.basePath}/wegvakonderdeelplanning/${encodeURIComponent(String(object_guid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAll2(observe?: 'body', reportProgress?: boolean): Observable<Array<Wegvakonderdeelplanning>>;
    public getAll2(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Wegvakonderdeelplanning>>>;
    public getAll2(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Wegvakonderdeelplanning>>>;
    public getAll2(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Wegvakonderdeelplanning>>('get',`${this.basePath}/wegvakonderdeelplanning/unpaged`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param page Zero-based page index (0..N)
     * @param size The size of the page to be returned
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllPaged1(page?: number, size?: number, sort?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<PageWegvakonderdeelplanning>;
    public getAllPaged1(page?: number, size?: number, sort?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageWegvakonderdeelplanning>>;
    public getAllPaged1(page?: number, size?: number, sort?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageWegvakonderdeelplanning>>;
    public getAllPaged1(page?: number, size?: number, sort?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (sort) {
            sort.forEach((element) => {
                queryParameters = queryParameters.append('sort', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PageWegvakonderdeelplanning>('get',`${this.basePath}/wegvakonderdeelplanning`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public save2(body: Wegvakonderdeelplanning, observe?: 'body', reportProgress?: boolean): Observable<Wegvakonderdeelplanning>;
    public save2(body: Wegvakonderdeelplanning, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Wegvakonderdeelplanning>>;
    public save2(body: Wegvakonderdeelplanning, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Wegvakonderdeelplanning>>;
    public save2(body: Wegvakonderdeelplanning, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling save2.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Wegvakonderdeelplanning>('post',`${this.basePath}/wegvakonderdeelplanning`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param object_guid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public update2(body: Wegvakonderdeelplanning, object_guid: string, observe?: 'body', reportProgress?: boolean): Observable<Wegvakonderdeelplanning>;
    public update2(body: Wegvakonderdeelplanning, object_guid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Wegvakonderdeelplanning>>;
    public update2(body: Wegvakonderdeelplanning, object_guid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Wegvakonderdeelplanning>>;
    public update2(body: Wegvakonderdeelplanning, object_guid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update2.');
        }

        if (object_guid === null || object_guid === undefined) {
            throw new Error('Required parameter object_guid was null or undefined when calling update2.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Wegvakonderdeelplanning>('put',`${this.basePath}/wegvakonderdeelplanning/${encodeURIComponent(String(object_guid))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
